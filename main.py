import time
import os
import threading
from email_extraction_code import start_extraction  # Import from the email extraction code
from agent.email_agent_model import PersonalAssistantModel  # Import the agent

def wait_for_email_extraction():
    """
    Wait for the email extraction to finish by checking if the 'extracted_emails' folder
    contains new files. This function waits until email extraction is complete.
    """
    email_folder = 'extracted_emails'

    # Check if the folder exists, and if not, create it
    if not os.path.exists(email_folder):
        os.makedirs(email_folder)

    # Wait until some emails are extracted and placed in the folder
    while not os.listdir(email_folder):  # Checking if the folder is empty
        print("Waiting for emails to be extracted...")
        time.sleep(5)  # Wait for 5 seconds before checking again

    print("Emails have been successfully extracted.")
    

def run_email_extraction():
    """
    Function to trigger the email extraction process.
    Starts the extraction in a background thread and waits for it to complete.
    """
    print("Starting email extraction process...")
    threading.Thread(target=start_extraction).start()  # Start extraction in background

    # Wait for email extraction to finish
    wait_for_email_extraction()

def run_agent():
    """
    Function to run the personal assistant agent to process the extracted emails.
    """
    print("Running the personal assistant agent...")

    # Initialize the personal assistant model
    assistant = PersonalAssistantModel()

    # Process the emails using the agent
    result = assistant.process_emails()

    # Print the results generated by the agent
    print("Agent finished processing emails. Actionable items:")
    print(result)

if __name__ == "__main__":
    # Step 1: Start the email extraction process
    run_email_extraction()

    # Step 2: Once emails are extracted, run the agent to process the emails
    run_agent()
